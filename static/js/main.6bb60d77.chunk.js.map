{"version":3,"sources":["hooks/form.js","components/context/Login.js","components/auth/auth.js","components/context/Settings.js","components/Pagination/Pagination.js","components/todo/todo.js","components/navbar/Navbar.js","components/LoginForm/loginForm.js","App.js","reportWebVitals.js","index.js"],"names":["useForm","callback","defaultValues","useState","values","setValues","handleSubmit","event","preventDefault","target","reset","handleChange","persist","name","value","parseInt","useEffect","LoginContext","React","createContext","Login","props","loggedIn","setLoggedIn","username","cookie","load","actions","user","setUser","login","password","superAgent","post","set","base64","encode","response","console","log","body","validateMyUser","token","userFromToken","jwt","decode","save","state","can","action","includes","logout","remove","Provider","children","Auth","useContext","condition","SettingsContext","SettingsContextProvider","currentPage","setCurrentPage","postsPerPage","setPostsPerPage","todoContext","showComplete","setShowComplete","Pagination","totalPosts","paginate","pageNumbers","i","Math","ceil","push","className","map","number","onClick","LOCAL_STORAGE_KEY","ToDo","todos","setTodos","difficulty","list","setList","incomplete","setIncomplete","listOfUncompleted","setListOfUncompleted","item","id","uuid","complete","toggleComplete","items","filter","storageTodos","JSON","parse","localStorage","getItem","length","storageShow","storageNumber","storageIncomplete","setItem","stringify","indexOfLastPost","indexOfFirstPost","currentPosts","slice","currentUncompletedPosts","incompleteCount","document","title","onSubmit","onChange","type","placeholder","defaultValue","min","max","e","deleteItem","text","assignee","defaultChecked","htmlFor","deleteListItem","toggleUncompletedList","pageNumber","homeNavbar","Group","align","Alignment","LEFT","Heading","Divider","LoginForm","loginContext","setUsername","setPassword","required","App","Navbar","Settings","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6bb60d77.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useForm = (callback, defaultValues = {}) => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    callback(values);\n    event.target.reset();\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n\n    let { name, value } = event.target;\n    if (parseInt(value)) {\n      value = parseInt(value);\n    }\n\n    setValues(values => ({ ...values, [name]: value }));\n  };\n\n  useEffect(() => {\n    setValues(defaultValues);\n  }, [defaultValues]);\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;","import React, { useState, useEffect } from \"react\";\nimport cookie from \"react-cookies\";\nimport superAgent from \"superagent\";\n\nimport jwt from 'jsonwebtoken';\nimport base64 from 'base-64';\nexport const LoginContext = React.createContext();\nconst API = `https://hiservice.herokuapp.com`;\nexport default function Login(props) {\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [user, setUser] = useState({\n\n    username: cookie.load('username') || \"\",\n    actions: cookie.load('actions') || []\n  });\n  useEffect(() => {\n    const tokenFromCookies = cookie.load('token');\n    if (tokenFromCookies) {\n      setLoggedIn(true);\n      setUser(user);\n    } else {\n      setLoggedIn(false);\n      setUser({})\n    }\n    // eslint-disable-next-line\n  }, []);\n  const can = (action) => {\n    return user?.actions?.includes(action)\n  }\n  const login = async (username, password) => {\n    const response = await superAgent.post(`${API}/users/login`).set('authorization', `Basic ${base64.encode(`${username}:${password}`)}`);\n    console.log(response.body)\n    validateMyUser(response.body)\n  }\n  const validateMyUser = (user) => {\n    if (user.token) {\n      const userFromToken = jwt.decode(user.token);\n      console.log('username >>>> ', userFromToken);\n      setLoggedIn(true);\n      setUser(user);\n      cookie.save('token', user.token);\n      cookie.save('username', user.username);\n      cookie.save('actions', user.actions);\n      console.log({ loggedIn });\n    } else {\n      setLoggedIn(false);\n      setUser({});\n    }\n  }\n  const logout = () => {\n    setLoggedIn(false);\n    setUser({});\n    cookie.remove('token');\n    cookie.remove('actions');\n    cookie.remove('username');\n  }\n  const state = {\n    loggedIn: loggedIn,\n    user: user,\n    can: can,\n    login: login,\n    logout: logout\n  }\n  return (\n    <>\n      <LoginContext.Provider value={state}>\n        {props.children}\n      </LoginContext.Provider>\n    </>\n  )\n}","import React, { useContext } from \"react\";\nimport { LoginContext } from \"../context/Login\";\nimport { When } from \"react-if\";\n\nexport default function Auth(props) {\n  const login = useContext(LoginContext);\n  return (\n    <>\n      <When condition={login.loggedIn && login.can(props.actions)}>\n        {props.children}\n      </When>\n    </>\n  );\n}","import React, { createContext, useContext, useState } from \"react\";\n\nexport const SettingsContext = createContext();\n\nconst SettingsContextProvider = ({ children }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(3);\n  const [showComplete, setShowComplete] = useState(true);\n\n  const todoContext = {\n    currentPage,\n    setCurrentPage,\n    postsPerPage,\n    showComplete,\n    setShowComplete,\n    setPostsPerPage,\n  };\n  return (\n    <SettingsContext.Provider value={todoContext}>\n      {children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport const useSettingsContext = () => useContext(SettingsContext);\n\nexport default SettingsContextProvider;","import React from 'react';\n\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <nav aria-label=\"Page navigation example\">\n      <ul className='pagination'>\n        {pageNumbers.map(number => (\n          <li key={number} className='page-item'>\n            {/* <a onClick={() => paginate(number)} href='/' className='page-link'>\n              {number}\n            </a> */}\n            <button onClick={() => paginate(number)} className='page-link'>{number}</button>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Pagination;","import React, { useEffect, useState, useContext } from 'react';\nimport useForm from '../../hooks/form.js';\n\n// import Form from '../context/Form';\nimport { When } from 'react-if';\nimport { LoginContext } from \"../context/Login\"\nimport Auth from \"../auth/auth\"\n\nimport { v4 as uuid } from 'uuid';\nimport { useSettingsContext } from '../context/Settings'\nimport Pagination from \"../Pagination/Pagination\";\nimport './todo.scss';\n\nconst LOCAL_STORAGE_KEY = 'localStorage';\n\nconst ToDo = () => {\n  const { currentPage, setCurrentPage, postsPerPage, setPostsPerPage, showComplete, setShowComplete } = useSettingsContext();\n  const login = useContext(LoginContext);\n\n  const [todos, setTodos] = useState([]);\n  const [defaultValues] = useState({\n    difficulty: 3,\n  });\n\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const [listOfUncompleted, setListOfUncompleted] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem, defaultValues);\n\n\n  function addItem(item) {\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n    setTodos([...todos, item]);\n    setListOfUncompleted([...listOfUncompleted, item]);\n  }\n\n  function deleteItem(id) {\n    const items = todos.filter(item => item.id !== id);\n    setTodos(items);\n  }\n\n  function deleteListItem(id) {\n    const items = listOfUncompleted.filter(item => item.id !== id);\n    setListOfUncompleted(items);\n  }\n\n  function toggleComplete(id) {\n    const items = todos.map(item => {\n      if (item.id === id) {\n        item.complete = !item.complete;\n      }\n      if (item.complete === true) {\n        listOfUncompleted.filter(item => item.id !== id)\n      }\n      return item;\n    });\n    setTodos(items);\n    setList(items);\n    setListOfUncompleted(items);\n  }\n  function toggleUncompletedList(id) {\n    const items = listOfUncompleted.map(item => {\n      if (item.id === id) {\n        item.complete = !item.complete;\n      }\n      if (item.complete === true) {\n        listOfUncompleted.filter(item => item.id !== id)\n      }\n      return item;\n    });\n    setTodos(items);\n    // setListOfUncompleted(items);\n  }\n\n  const handleShow = () => {\n    setShowComplete(!showComplete)\n  }\n\n  const handlePage = (e) => {\n    setPostsPerPage(parseInt(e.target.value))\n  }\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      if (storageTodos.length > 0) {\n        setTodos(storageTodos);\n      }\n    }\n    const storageShow = JSON.parse(localStorage.getItem('status'));\n    if (storageShow) {\n      if (storageShow.length > 0) {\n        setShowComplete(storageShow);\n      }\n    }\n    const storageNumber = JSON.parse(localStorage.getItem('number'));\n    if (storageNumber) {\n      if (storageNumber.length > 0) {\n        setPostsPerPage(storageNumber);\n      }\n    }\n    const storageIncomplete = JSON.parse(localStorage.getItem('incomplete'));\n    if (storageIncomplete) {\n      if (storageIncomplete.length > 0) {\n        setListOfUncompleted(storageIncomplete);\n      }\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    // fires when todos array gets updated\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n    localStorage.setItem('status', JSON.stringify(showComplete));\n    localStorage.setItem('number', JSON.stringify(postsPerPage));\n    localStorage.setItem('incomplete', JSON.stringify(listOfUncompleted));\n  }, [todos, showComplete, postsPerPage, listOfUncompleted]);\n\n  // Get current posts\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = todos.slice(indexOfFirstPost, indexOfLastPost);\n  const currentUncompletedPosts = listOfUncompleted.slice(indexOfFirstPost, indexOfLastPost);\n\n  // Change page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  useEffect(() => {\n    let incompleteCount = todos.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [todos, incomplete]);\n\n  // useEffect(() => {\n  //   if (todos.complete === false) {\n  //     setListOfUncompleted([...listOfUncompleted, todos.complete]);\n  //   }\n  // }, [todos, listOfUncompleted]);\n\n  return (\n    <>\n      <When condition={login.loggedIn}>\n        <button onClick={login.logout}>Log Out</button>\n        <Auth actions='read'>\n          <header data-testid='header'>\n            <h1>To Do List: {incomplete} items pending</h1>\n          </header>\n        </Auth>\n        <Auth actions='delete'>\n          <form onSubmit={handleSubmit}>\n\n            <h2 className='text-head'>Add To Do Item</h2>\n\n            <label>\n              <span>To Do Item</span>\n              <input data-testid='input' className='form-input' onChange={handleChange} name=\"text\" type=\"text\" placeholder=\"Item Details\" />\n            </label>\n\n            <label>\n              <span>Assigned To</span>\n              <input onChange={handleChange} className='form-input' name=\"assignee\" type=\"text\" placeholder=\"Assignee Name\" />\n            </label>\n\n            <label>\n              <span>Difficulty</span>\n              <input onChange={handleChange} className='form-input' defaultValue={defaultValues.difficulty} type=\"range\" min={1} max={5} name=\"difficulty\" />\n            </label>\n\n            <input type=\"number\" className='per-page' name=\"postsPerPage\" placeholder='Number of posts per page' onChange={handlePage} />\n            <label>\n              <button data-testid='button' type=\"submit\">Add Item</button>\n            </label>\n          </form>\n          <button className='show' onClick={handleShow}>{showComplete ? 'Hide Completed Items' : 'Show Completed Items'}</button>\n          {\n            showComplete ?\n              currentPosts.map((item) => {\n                return (\n                  <div className='list-continuer'>\n                    <div key={item.id} className='items'>\n                      <div className='btn-list'>\n                        <button onClick={() => deleteItem(item.id)}>x</button>\n                      </div>\n                      <p className='p-text'>\n                        {item.text}\n                      </p>\n                      <div className='p-holder'>\n                        <span className='p-assigned'><small>Assigned to: {item.assignee}</small></span>\n                        <span className='p-difficulty'><small>Difficulty: {item.difficulty}</small></span>\n                      </div>\n                      <div className='checkbox'>\n                        {\n                          item.complete ? <div>\n                            <input type=\"checkbox\" name='completed' onClick={() => toggleComplete(item.id)} defaultChecked={true} />\n                            <label htmlFor=\"completed\">Completed</label>\n                          </div>\n                            : <div>\n                              <input type=\"checkbox\" name=\"Incomplete-item\" onClick={() => toggleComplete(item.id)} />\n                              <label htmlFor=\"Incomplete-item\">Complete</label>\n                            </div>\n                        }\n                      </div>\n                      <hr />\n                    </div>\n                  </div>\n                )\n              })\n              : currentUncompletedPosts.map((item) => {\n                return (\n                  <div>\n                    {\n                      !item.complete ?\n                        <div className='list-continuer'>\n                          <div key={item.id} className='items'>\n                            <div className='btn-list'>\n                              <button onClick={() => deleteListItem(item.id)}>x</button>\n                            </div>\n                            <p className='p-text'>\n                              {item.text}\n                            </p>\n                            <div className='p-holder'>\n                              <span className='p-assigned'><small>Assigned to: {item.assignee}</small></span>\n                              <span className='p-difficulty'><small>Difficulty: {item.difficulty}</small></span>\n                            </div>\n                            <div className='checkbox'>\n                              <div>\n                                <input type=\"checkbox\" name='Incomplete' onClick={() => toggleUncompletedList(item.id)} />\n                                <label htmlFor=\"Incomplete\">Complete</label>\n                              </div>\n                            </div>\n                            <hr />\n                          </div>\n                        </div>\n                        : null\n                    }\n                  </div>\n                )\n              })\n          }\n          <div className='page'>\n            <Pagination postsPerPage={postsPerPage}\n              totalPosts={todos.length}\n              paginate={paginate} />\n          </div>\n        </Auth>\n      </When>\n    </>\n  );\n};\n\nexport default ToDo;\n// eslint-disable-next-line\n{/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */ }\n// eslint-disable-next-line\n{/* <header data-testid='header'>\n          <h1>To Do List: {incomplete} items pending</h1>\n        </header>\n\n        <form onSubmit={handleSubmit}>\n\n          <h2 className='text-head'>Add To Do Item</h2>\n\n          <label>\n            <span>To Do Item</span>\n            <input data-testid='input' onChange={handleChange} name=\"text\" type=\"text\" placeholder=\"Item Details\" />\n          </label>\n\n          <label>\n            <span>Assigned To</span>\n            <input onChange={handleChange} name=\"assignee\" type=\"text\" placeholder=\"Assignee Name\" />\n          </label>\n\n          <label>\n            <span>Difficulty</span>\n            <input onChange={handleChange} defaultValue={defaultValues.difficulty} type=\"range\" min={1} max={5} name=\"difficulty\" />\n          </label>\n\n          <label>\n            <button data-testid='button' type=\"submit\">Add Item</button>\n          </label>\n\n          <input type=\"number\" className='per-page' name=\"postsPerPage\" placeholder='Number of posts per page' onChange={(e) => { setPostsPerPage(parseInt(e.target.value)) }} />\n        </form>\n        <button className='show' onClick={handleShow}>{showComplete ? 'Hide Completed Items' : 'Show Completed Items'}</button>\n        {\n          showComplete ?\n            currentPosts.map((item, index) => {\n              return (\n                <div className='list-continuer' key={index}>\n                  <div key={item.id} className='items'>\n                    <div className='btn-list'>\n                      <button onClick={() => deleteItem(item.id)}>x</button>\n                    </div>\n                    <p className='p-text'>\n                      {item.text}\n                    </p>\n                    <div className='p-holder'>\n                      <span className='p-assigned'><small>Assigned to: {item.assignee}</small></span>\n                      <span className='p-difficulty'><small>Difficulty: {item.difficulty}</small></span>\n                    </div>\n                    <div className='checkbox'>\n                      {\n                        item.complete ? <div>\n                          <input type=\"checkbox\" name='completed' onClick={() => toggleComplete(item.id)} defaultChecked={true} />\n                          <label htmlFor=\"completed\">Completed</label>\n                        </div>\n                          : <div>\n                            <input type=\"checkbox\" name=\"Incomplete-item\" onClick={() => toggleComplete(item.id)} />\n                            <label htmlFor=\"Incomplete-item\">Complete</label>\n                          </div>\n                      }\n                    </div>\n                    <hr />\n                  </div>\n                </div>\n              )\n            })\n            : currentUncompletedPosts.map((item, index) => {\n              return (\n                <div className='list-continuer' key={index}>\n                  <div key={item.id} className='items'>\n                    <div className='btn-list'>\n                      <button onClick={() => deleteListItem(item.id)}>x</button>\n                    </div>\n                    <p className='p-text'>\n                      {item.text}\n                    </p>\n                    <div className='p-holder'>\n                      <span className='p-assigned'><small>Assigned to: {item.assignee}</small></span>\n                      <span className='p-difficulty'><small>Difficulty: {item.difficulty}</small></span>\n                    </div>\n                    <div className='checkbox'>\n                      {\n                        !item.complete ? <div>\n                          <input type=\"checkbox\" name='Incomplete' onClick={() => toggleUncompletedList(item.id)} />\n                          <label htmlFor=\"Incomplete\">Complete</label>\n                        </div> : null\n                      }\n                    </div>\n                    <hr />\n                  </div>\n                </div>\n              )\n            })\n        }\n        <div className='page'>\n          <Pagination postsPerPage={postsPerPage}\n            totalPosts={todos.length}\n            paginate={paginate} />\n        </div> */}","import React from 'react';\nimport { Navbar, Alignment } from '@blueprintjs/core';\n\nimport './navbar.scss'\n\nconst homeNavbar = () => {\n  return (\n    <Navbar>\n      <Navbar.Group align={Alignment.LEFT}>\n        <Navbar.Heading>ToDo App</Navbar.Heading>\n        <Navbar.Divider />\n      </Navbar.Group>\n    </Navbar>\n  )\n}\n\nexport default homeNavbar","import React, { useContext, useState } from \"react\";\nimport \"./loginForm.css\"\nimport { LoginContext } from \"../context/Login\";\nimport { When } from \"react-if\";\n\nexport default function LoginForm(props) {\n  const loginContext = useContext(LoginContext);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState();\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    loginContext.login(username, password);\n  };\n  const usernameHandler = (e) => {\n    e.preventDefault();\n    setUsername(e.target.value);\n  };\n  const passwordHandler = (e) => {\n    e.preventDefault();\n    setPassword(e.target.value);\n  };\n  return (\n    <>\n      <When condition={!loginContext.loggedIn}>\n        <div className=\"card-form\" data-testid='header'>\n          <form className=\"form-login\">\n            <div className=\"input\">\n              <label className=\"username\">Username </label>\n              <input data-testid='input' type=\"text\" placeholder=\"Enter your username\" name=\"uname\" required onChange={usernameHandler} />\n            </div>\n\n            <div className=\"input\">\n              <label className=\"password\">Password </label>\n              <input type=\"password\" placeholder=\"Enter your password\" name=\"pass\" required onChange={passwordHandler} />\n            </div>\n\n            <div className=\"button\">\n              <button data-testid='button' type=\"submit\" onClick={handleSubmit}>Log In</button>\n            </div>\n          </form>\n        </div>\n      </When>\n\n    </>\n  );\n}","import React, { Component } from 'react'\n\nimport ToDo from './components/todo/todo';\nimport Navbar from './components/navbar/Navbar';\nimport SettingsContextProvider from './components/context/Settings';\nimport Login from './components/context/Login';\nimport LoginForm from './components/LoginForm/loginForm'\nimport './App.css';\n\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className='todo-app'>\n        <Login>\n          <Navbar />\n          <LoginForm />\n          <SettingsContextProvider>\n            <ToDo />\n          </SettingsContextProvider>\n        </Login>\n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n// import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n// import { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}